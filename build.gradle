plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
}

base {
	archivesName = project.archives_base_name
}
version = "$project.version+${libs.versions.minecraft.get()}"
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	jcenter()
	maven {
		name = 'BlameJared Maven (CrT / Bookshelf)'
		url = 'https://maven.blamejared.com'
	}
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
		content {
			includeGroup 'io.github.ladysnake'
			includeGroup 'org.ladysnake'
			includeGroupByRegex 'dev\\.onyxstudios.*'
		}
	}
	mavenCentral()
	maven {
		name 'Curios maven'
		url = "https://maven.theillusivec4.top/"
	}
	maven {
		name = "Curse Maven"
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {url = 'https://maven.blamejared.com/' }
	maven {url = "https://mvn.devos.one/releases/" }
	maven {url = "https://api.modrinth.com/maven" }
	maven {url = "https://maven.theillusivec4.top/"}
	maven {url = "https://maven.jamieswhiteshirt.com/libs-release"}
	maven {url = 'https://maven.ladysnake.org/releases'}
	maven {url = "https://maven.terraformersmc.com/"}
}

project.configurations.configureEach {
	exclude(group: "net.fabricmc", module: "fabric-loader")
	exclude(group: "net.fabricmc.fabric-api")
}
loom {
	runs {
		datagen {
			client()
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=galactic_curiosities"
			// from ae2
			property "porting_lib.datagen.existing_resources", file("src/main/resources").absolutePath
			property "lodestone.data.server", "false"
			runDir "build/datagen"
		}
	}
	// Loom and Loader both use this block in order to gather more information about your mod.
	mods {
		// This should match your mod id.
		"galactic_curiosities" {

			// Tell Loom about each source set used by your mod here. This ensures that your mod's classes are properly transformed by Loader.
			sourceSet("main")
			// If you shade (directly include classes, not JiJ) a dependency into your mod, include it here using one of these methods:
			// dependency("com.example.shadowedmod:1.2.3")
			// configuration("exampleShadedConfigurationName")
		}
	}
}
sourceSets.main.resources.srcDirs += ['src/main/generated']

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft libs.minecraft
	mappings loom.layered {
		mappings "org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:intermediary-v2"
		officialMojangMappings()
	}
	// Replace the above line with the block below if you want to use Mojang mappings as your primary mappings, falling back on QM for parameters and Javadocs
	/*
	mappings loom.layered {
		mappings "org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:intermediary-v2"
		officialMojangMappings()
	}
	*/
	modImplementation("foundry.veil:Veil-fabric-1.20.1:${project.veil_version}") {
		exclude group: "maven.modrinth"
	}
	modImplementation "org.ladysnake:satin:${satin_version}"
	// Include Satin as a Jar-in-Jar dependency (optional)
	include "org.ladysnake:satin:${satin_version}"
	modImplementation libs.quilt.loader
	modImplementation "curse.maven:lodestone-616457:5483252"
	modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-base:5.2.1")
	modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:5.2.1")
	modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-world:5.2.1")
	modImplementation("dev.emi:trinkets:3.7.2")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:base:${project.porting_lib_version}+${project.minecraft_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:accessors:${project.porting_lib_version}+${project.minecraft_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:attributes:${project.porting_lib_version}+${project.minecraft_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:blocks:${project.porting_lib_version}+${project.minecraft_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:config:${project.porting_lib_version}+${project.minecraft_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:core:${project.porting_lib_version}+${project.minecraft_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:data:${project.porting_lib_version}+${project.minecraft_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:entity:${project.porting_lib_version}+${project.minecraft_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:extensions:${project.porting_lib_version}+${project.minecraft_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:items:${project.porting_lib_version}+${project.minecraft_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:lazy_registration:${project.porting_lib_version}+${project.minecraft_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:networking:${project.porting_lib_version}+${project.minecraft_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:tags:${project.porting_lib_version}+${project.minecraft_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:transfer:${project.porting_lib_version}+${project.minecraft_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:tool_actions:${project.porting_lib_version}+${project.minecraft_version}")
	modImplementation("com.jamieswhiteshirt:reach-entity-attributes:${project.rea_version}")
	// QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
	// Quilted Fabric API will automatically pull in the correct QSL version.
	modImplementation libs.quilted.fabric.api
	// modImplementation libs.bundles.quilted.fabric.api // If you wish to use Fabric API's deprecated modules, you can replace the above line with this one
}

processResources {
	inputs.properties 'version': version, 'group': project.group

	filesMatching('quilt.mod.json') {
		expand 'version': version, 'group': project.group
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from('LICENSE.md') {
		rename { "${it}_${base.archivesName.get()}" }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
